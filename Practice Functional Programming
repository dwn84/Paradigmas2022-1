1.

#lang racket

(define (sum-of-two-integers a b)
  (+ a b))
  
(define A (read))  
(define B (read))

(sum-of-two-integers A B)


2.
#lang racket
(display "Hello World")

3.
#lang racket
(define (repetir-hola N)
    (cond 
        [(= N 0) (display "")]
        [else
         (displayln "Hello World")
         (repetir-hola (sub1 N))]
        ))

(define N (read))
(repetir-hola N)

4.
#lang racket
;Recibir datos hasta que el sistema o
;el usuario indiquen fin de entrada EOF
(define (leer)
  (define x (read))
    (if (eof-object? x)
        x
        (cons x (leer))
        )
  )
;Almacenar datos de entrada en variable global
(define miLista (leer))
;Recorrer la lista
(define (recorrer-lista l i)
  (cond
    [(eof-object? (cdr l))(repetir i (car l))]
    [else (repetir i (car l) )(recorrer-lista (cdr l) i)]
    )
  )

(define (repetir s x)
  (cond
    [(= s 0) (display "")]    
    [else (displayln x)(repetir (sub1 s)x)]
    )
  )
(recorrer-lista (cdr miLista) (car miLista))
